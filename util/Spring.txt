1 - Depedencias 

https://start.spring.io/#!type=maven-project&language=java&platformVersion=2.7.5&packaging=jar&jvmVersion=17&groupId=org.soulcodeacademy&artifactId=helpr&name=helpr&description=Projeto%20de%20estudo%20back-end%20da%20Soulcode%20Academy%20JFS&packageName=
org.soulcodeacademy.helpr&dependencies=devtools,mysql,data-jpa,web,validation

2 - Criar o ambiente de desenvolvimento
DDL AUTO

CREATE => Dropa as tabelas e cria novamente.

NONE => Desabilita a funcionalidade.

VALIDATE => Valida o código gerado.

UPDATE => Atualizar as tabelas caso necessário.

CREATE-DROP => Dropa ao final da execução.

https://slides.com/josealmir/spring-backend

------------- FLUXO PULL REQUEST-------------
git status
git branch <novaBranch>
git checkout novaBranch
git add .
git status
git commit -m "Comentário"
git push origin novaBranch

-------------- APÓS A PULL REQUEST -------------
git checkout main
git pull

3 - COMENTÁRIOS SPRING
----------------------------------------- ENTITY ----------------------------------------- 

public abstract class Exemplo -> Não será possivel criar objetos desta classe, pois é uma classe 
abstract, só os herdeiros da classe poderam instanciar os objetos (métodos e propriedades).

@Id // Torna o campo abaixo uma PRIMARY KEY -> OBRIGATÓRIO na criação de 
@GeneratedValue(strategy = GenerationType.IDENTITY) // Preenche o campo id com AUTO_INCREMENT

@Enumerated -> Representa os valores do ENUM como texto
// Enum -> Delimita um conjunto de valores constantes
------------- RELACIONAMENTO ENTRE TABELAS 
@ManyToOne // MUITOS funcionarios para um cargo;
@JoinColumn(name = "id_Cargo") // Cria uma coluna nova é a chave estrangeira de Cargo

Na classe de herança o mysql irá criar uma única tabela 
// Gera uma coluna dtype para indicar qual a superclasse (Filho ou Filha)

// Anotações de relacionamento
// @OneToOne = 1:1
// @OneToMany/@ManyToOne = 1:N
// @ManyToMany = N:N

// Relacionamento Unidirecional = apenas uma das entidades "conhece" a outra
// Relacionamento Bidirecional = as duas entidades se "conhece"
----------------------------------------- REPOSITORY ----------------------------------------- 

@Repository -> O Spring fica resposanvel de instanciar está classe e injetar os métodos abaixo
public interface ExemploRepository extends JpaRepository<Exemplo, Integer> 

// Métodos presentes
// - findAll() => SELECT * FROM usuarios;
// - findById(Integer) => SELECT * FROM usuarios WHERE id = ?;
// - save(Usuario) => INSERT INTO(caso id nulo) ou UPDATE (caso id não nulo)
// - delete(Usuario) => DELETE FROM usuarios WHERE id = ?;

// CRUD 
// Entidade -> Repository -> DTO -> Service + Controller

----------------------------------------- DTO ----------------------------------------- 
// Guarda as validações em comum para cliente e funcionário
// No controller: JSON -> DTO
// Verifica os dados inseridos de cliente
// @NotNull => só verifica se tem valor ou não (objetos, integer, double)
// @NotBlank => verifica se o telefone está "" (string)
// DTO -> Objeto de transferencia de dados.
// É util para validarmos as informações transferidas pelo cliente


4 - Spring Security

https://slides.com/josealmir/spring-security

CLASSE DE TESTE JWT

   public static void main(String[] args) {
        String senha = "senhatop";

        String token = JWT.create()
                .withSubject("jr@gmail.com") // De quem pertence o token
                //.withExpiresAt() data de expiração
                .withClaim("nome", "batata") // informações adicionais
                .sign(Algorithm.HMAC512(senha)); // assinatura -> Codificar

        String email = JWT.require(Algorithm.HMAC512(senha))
                .build().verify(token)
                .getSubject();
        String batata = JWT.require(Algorithm.HMAC512(senha))
                .build().verify(token)
                .getClaim("nome").asString();

        System.out.println("E-mail: "+ email);
        System.out.println("Nome: "+ batata);
    }

1.0 -> Criar as variáveis de ambiente
nomeVarivel=valordasenha -> Senha
tempoValidade=valor ms -> Data de expiração token de acesso

2.0 -> Criar a classe TokenUtil com a anotação @Component
